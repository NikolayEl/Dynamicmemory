#include "dmemory.h"
#include "dmemorytemplate.cpp"

//#define ONE_DYNAMIC_ARRAY
//#define PREFORMANCE_TEST
#define TWO_DYNAMIC_ARRAY

void main()
{
	setlocale(LC_ALL, "Russian");
	int n;
	int answer;
	typedef int DataType;
	/*cout << "Выберите 1-int, 2-double, 3-char: "; cin >> answer;
	if (answer == 1)
	{
		typedef int*& DataType;
	} else if (answer == 2)
	{
		typedef double *&DataType;
	} else
	{
		typedef char *&DataType;
	}*/
	
#ifdef ONE_DYNAMIC_ARRAY
	cout << "Введите размер массива: "; cin >> n;
	DataType* arr = new DataType[n];
	FillRand(arr, n);
	cout << "Исходный массив:" << endl;
	Print(arr, n);
	cout << "Конец исходного массива" << endl << endl;



	// -----------------------------------------------------------------------
	// Добавляем элемент в конец массива
	DataType value;
	cout << "Введите добавляемый элемент: "; cin >> value;
	PushBack(arr, n, value);
	//cout << &arr << endl; //проверка адреса массива - УСПЕШНО, работаем именно с одним и тем же массивом
	cout << "Добавили в конец массива число " << value << ":" << endl;
	Print(arr, n); cout << endl;

	//-------------------------------------------------------------------------
	// Добавляем элемент в начало массива

	DataType number_front;
	cout << "Введите число, добавляемое в начало: "; cin >> number_front;
	PushFront(arr, n, number_front);
	cout << "Добавили в начало массива число " << number_front << ":" << endl;
	Print(arr, n); cout << endl;

	//-------------------------------------------------------------------------
	// Добавляем значение по указанному индексу

	int index;
	DataType number_index;
	cout << "Введите число, которое вы хотите добавить: "; cin >> number_index;
	cout << "Введите номер положения числа в массиве ,куда вы хотите его добавить от 0 до " << n << " :"; cin >> index;
	Insert(arr, n, number_index, index);
	cout << "Добавили число " << number_index << " по индексу " << index << ":" << endl;
	Print(arr, n); cout << endl;

	//-------------------------------------------------------------------------
	// Удаляем последний элемент массива
	PopBack(arr, n);
	cout << "Удалили последний элемент массива:" << endl;
	Print(arr, n); cout << endl;

	//--------------------------------------------------------------------------
	// Удаляем нулевой элемент массива
	PopFront(arr, n);
	cout << "Удалили нулевой элемент массива:" << endl;
	Print(arr, n);

	//--------------------------------------------------------------------------
	// Удаляем элемент из массива по указанному индексу
	int index_erase;
	cout << "Укажите индекс удаляемого числа (от 0 до " << n - 1 << "): "; cin >> index_erase;
	Erase(arr, n, index_erase);
	cout << "Удалили число по индексу " << index_erase << ":" << endl;
	Print(arr, n); cout << endl;

	delete[] arr;
#endif ONE_DYNAMIC_ARRAY

#ifdef TWO_DYNAMIC_ARRAY
	//---------------------------------------------------------------------------------------------------------------
	// Двумерные динамические массивы
	int rows, cols;
	cout << "Введите кол-во строк: "; cin >> rows;
	cout << "Введите кол-во столбцов: "; cin >> cols;

	DataType** arr_dual = Allocate<DataType>(rows, cols);
	FillRand(arr_dual, rows, cols);
	Print(arr_dual, rows, cols);


	// -------------------------------------------------------------------------------------------------------------
	// Вывод при помощи арифметики указателей
	cout << "Вывод при помощи арифметики указателей" << endl;

	for (int i = 0; i < rows; i++)
	{
		for (int j = 0; j < cols; j++)
		{
			cout << *(*(arr_dual + i) + j) << "\t";
		}
		cout << endl;
	}



	// ---------------------------------------------------------------------------------------------------------
	// Добавляем в конец пустую строку
	cout << endl << "Добавляем в конец динамического массива пустую строку" << endl;
	arr_dual = Push_Row_Back(arr_dual, rows, cols);
	Print(arr_dual, rows, cols);
	system("PAUSE");

	//------------------------------------------------------------------------------------------------
	// Добавляем столбец в конец динамического массива

	cout << endl << "Добавляем столбец в конец динамического массива" << endl;
	Push_Col_Back(arr_dual, rows, cols);
	Print(arr_dual, rows, cols);
	system("PAUSE");

	//------------------------------------------------------------------------------------------------------------
	// Добавляем пустую строку в начало динамического массива

	cout << endl << "Добавляем пустую строку в начало динамического массива" << endl;
	arr_dual = Push_Row_Front(arr_dual, rows, cols);
	Print(arr_dual, rows, cols);
	system("PAUSE");

	//---------------------------------------------------------------------------------------------------------
	// добавляет пустой столбец в начало двумерного динамического массива

	cout << endl << "Добавляем пустой столбец в начало" << endl;
	Push_Col_Front(arr_dual, rows, cols);
	Print(arr_dual, rows, cols);
	system("PAUSE");

	//----------------------------------------------------------------------------------------------------------
	// вставляет пустую строку в двумерный динамический массив по заданному индексу
	cout << endl << "Вставляем пустую строку в двумерный динамический массив по заданному индексу" << endl;

	int index_row;
	cout << "Задайте индекс строки от 0 до " << rows << ": "; cin >> index_row; //Так как мы можем вставить в самый конец массива, потому мы пишем rows целиком (без вычетания)
	arr_dual = Insert_Row(arr_dual, rows, cols, index_row);
	Print(arr_dual, rows, cols);
	system("PAUSE");
	//---------------------------------------------------------------------------------------------
	// вставляет пустой столбец в двумерный динамический массив по заданному индексу
	cout << endl << "Вставляем пустой столбец в двумерный динамический массив по заданному индексу" << endl;

	int index_col;
	cout << "Укажите индекс куда будем вставлять столбец от 0 до " << cols << ": "; cin >> index_col;
	Insert_Col(arr_dual, rows, cols, index_col);
	Print(arr_dual, rows, cols);
	system("PAUSE");

	//------------------------------------------------------------------------------------
	// удаляет последнюю строку двумерного динамического массива
	cout << endl << "Удаляет последнюю строку двумерного динамического массива" << endl;
	arr_dual = Pop_Row_Back(arr_dual, rows, cols);
	Print(arr_dual, rows, cols);
	system("PAUSE");

	//-----------------------------------------------------------------------------------------------------------
	// удаляет столбец с конца двумерного динамического массива
	cout << endl << "Удаляем столбец с конца двумерного динамического массива" << endl;
	Pop_Cols_Back(arr_dual, rows, cols);
	Print(arr_dual, rows, cols);
	system("PAUSE");

	//-----------------------------------------------------------------------------------------------------------
	//удаляет нулевую  строку двумерного динамического массива
	cout << endl << "Удаляем нулевую  строку двумерного динамического массива" << endl;
	arr_dual = Pop_Row_Front(arr_dual, rows, cols);
	Print(arr_dual, rows, cols);
	system("PAUSE");

	//---------------------------------------------------------------------------------------------------------------
	//удаляет столбец с начала двумерного динамического массива
	cout << endl << "Удаляем столбец с начала двумерного динамического массива" << endl;
	Pop_Cols_Front(arr_dual, rows, cols);
	Print(arr_dual, rows, cols);

	//------------------------------------------------------------------------------------------------------------------
	// удаляет строку из двумерного динамического массива по заданному индексу
	cout << endl << "Удаляем строку из двумерного динамического массива по заданному индексу" << endl;

	int index_rows;
	cout << "Укажите индекс строки, которую хотите удалить от 0 до " << rows - 1 << ": "; cin >> index_rows;
	arr_dual = Erase_Row(arr_dual, rows, cols, index_rows);
	Print(arr_dual, rows, cols);

	//--------------------------------------------------------------------------------------------------------
	//удаляет столбец из двумерного динамического массива по заданному индексу
	cout << endl << "Удаляем столбец из двумерного динамического массива по заданному индексу" << endl;

	int index_cols;
	cout << "Введите индекс удаляемого столбца из двумерного динамического массива от 0 до " << cols - 1 << " : "; cin >> index_cols;
	Erase_Cols(arr_dual, rows, cols, index_cols);
	Print(arr_dual, rows, cols);

#endif TWO_DYNAMIC_ARRAY

#ifdef PREFORMANCE_TEST

	cout << "Память выделена, для добавления строки нажмите на любую клавишу" << endl;
	system("PAUSE");
	clock_t c_start = clock();
	arr_dual = Push_Row_Back(arr_dual, rows, cols);
	clock_t c_end = clock();
	cout << "Строка добавлена за: " << double(c_end - c_start) / CLOCKS_PER_SEC << endl;
	system("PAUSE");


	Clear(arr_dual, rows);
#endif PREFORMANCE_TEST
}
